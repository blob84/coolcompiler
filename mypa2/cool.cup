/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;
import java.util.Stack;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features dummy_feature_list;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal formalc formal;
nonterminal Formals formal_list;
nonterminal Formals dummy_formal_list;
nonterminal Expression expression;
nonterminal Expressions dummy_expression_list; 
nonterminal Expressions expression_list;
nonterminal Expressions block_expression_list;
nonterminal Cases case_list;
nonterminal branch case;
nonterminal Expression expression_semi; /* expression for block {...} expression, following a semicolon */
nonterminal Expression letexpr;
nonterminal Expression letexpr_init;
nonterminal Expression letexpr_init_list;

/* Precedence declarations go here. */
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	  {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	  {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	  {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	  {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	| error SEMI   
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	;    

feature_list
	::= feature:f 
	  {: RESULT = (new Features(curr_lineno())).appendElement(f); :}
	| feature_list:fl feature:f 
	  {: RESULT = fl.appendElement(f); :}
 	;

feature 
	::= OBJECTID:o LPAREN formal_list:f RPAREN COLON TYPEID:t LBRACE expression:e RBRACE SEMI
	    {: RESULT = new method(curr_lineno(), o, f, t, e); :}
	| OBJECTID:o LPAREN dummy_formal_list:f RPAREN COLON TYPEID:t LBRACE expression:e RBRACE SEMI 
	  {: RESULT = new method(curr_lineno(), o, f, t, e); :}	      	     
        | OBJECTID:o COLON TYPEID:t ASSIGN expression:e SEMI
	  {: RESULT = new attr(curr_lineno(), o, t, e); :}
        | OBJECTID:o COLON TYPEID:t SEMI
  	  {: RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno())); :}
	| error SEMI
	;

dummy_formal_list
 	::= /* empty */
	    {: RESULT = new Formals(curr_lineno()); :}
	;    

formal 
       ::= OBJECTID:o COLON TYPEID:t
       	   {: RESULT = new formalc(curr_lineno(), o, t); :}
       ;

formal_list
       ::= formal:f 
 	   {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	| formal_list:fl COMMA formal:f
 	  {: RESULT = fl.appendElement(f); :}
	;
	

dummy_expression_list
	::= /* empty */
	     {: RESULT = new Expressions(curr_lineno()); :}
	;

expression_list
	::= expression:e
 	    {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| expression_list:el COMMA expression:e
 	  {: RESULT = el.appendElement(e); :}
	;

block_expression_list
	::= expression_semi:e 
	    {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
	| block_expression_list:bl expression_semi:e 
    	  {: RESULT = bl.appendElement(e); :}
	;

expression_semi 
	   ::= OBJECTID:o ASSIGN expression:e SEMI
	       {: RESULT = new assign(curr_lineno(), o, e); :}
	   |  OBJECTID ASSIGN error SEMI

     	   | expression:e AT TYPEID:t DOT OBJECTID:o LPAREN  expression_list:el RPAREN SEMI
	     {: RESULT = new static_dispatch(curr_lineno(), e, t, o, el);  :}  		  
     	   | expression:e AT TYPEID:t DOT OBJECTID:o LPAREN  dummy_expression_list:el RPAREN SEMI
	     {: RESULT = new static_dispatch(curr_lineno(), e, t, o, el); :}
	     
     	   | expression:e DOT OBJECTID:o LPAREN  expression_list:el RPAREN SEMI
	     {: RESULT = new dispatch(curr_lineno(), e, o, el); :} 
      	   | expression:e DOT OBJECTID:o LPAREN dummy_expression_list:el RPAREN SEMI
	     {: RESULT = new dispatch(curr_lineno(), e, o, el); :} 
   
           | OBJECTID:o LPAREN expression_list:el RPAREN SEMI
	     {: RESULT = new dispatch(curr_lineno(), (Expression) new object(curr_lineno(), AbstractTable.idtable.addString("self")), o, el); :}
           | OBJECTID:o LPAREN dummy_expression_list:el RPAREN SEMI
	     {: RESULT = new dispatch(curr_lineno(), (Expression) new object(curr_lineno(), AbstractTable.idtable.addString("self")), o, el);  :}
   
           | IF expression:e1 THEN expression:e2 ELSE expression:e3 FI SEMI
	     {: RESULT = new cond(curr_lineno(), e1, e2, e3); :}

           | WHILE expression:e1 LOOP expression:e2 POOL SEMI
	     {: RESULT = new loop(curr_lineno(), e1, e2); :}

           | LBRACE block_expression_list:e RBRACE SEMI		//current debugging
	     {: RESULT = new block(curr_lineno(), e); :}

           /*| LET OBJECTID:o COLON TYPEID:t ASSIGN expression:e1 IN expression:e2 SEMI
	     {: RESULT = new let(curr_lineno(), o, t, e1, e2); :}
	   | LET OBJECTID:o COLON TYPEID:t IN expression:e2   SEMI
	     {: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), e2); :}
	   | LET error OBJECTID:o   SEMI
	   */

	   | letexpr:e SEMI
	     {: RESULT = e;  :} 

	   | CASE expression:e OF case_list:c ESAC SEMI
	     {: RESULT = new typcase(curr_lineno(), e, c);  :}

           | NEW TYPEID:t SEMI
	     {: RESULT = new new_(curr_lineno(), t); :}

           | ISVOID expression:e SEMI
	     {: RESULT = new isvoid(curr_lineno(), e); :}

           | expression:e1 PLUS expression:e2 SEMI
	     {: RESULT = new plus(curr_lineno(), e1, e2); :}

           | expression:e1 MINUS expression:e2 SEMI
	     {: RESULT = new sub(curr_lineno(), e1, e2); :}

           | expression:e1 MULT expression:e2 SEMI
	     {: RESULT = new mul(curr_lineno(), e1, e2); :}

           | expression:e1 DIV expression:e2 SEMI
	     {: RESULT = new divide(curr_lineno(), e1, e2); :}

           | NEG expression:e SEMI
	     {: RESULT = new neg(curr_lineno(), e); :}

           | expression:e1 LE expression:e2 SEMI
	     {: RESULT = new leq(curr_lineno(), e1, e2); :}

           | expression:e1 LT expression:e2 SEMI
	     {: RESULT = new lt(curr_lineno(), e1, e2); :}

           | expression:e1 EQ expression:e2 SEMI
	     {: RESULT = new eq(curr_lineno(), e1, e2); :}

           | NOT expression:e SEMI
	     {: RESULT = new comp(curr_lineno(), e); :}

           | LPAREN expression:e RPAREN SEMI
	     {: RESULT = e; :}
     
           | OBJECTID:o	     SEMI
	     {: RESULT = new object(curr_lineno(), o); :}

           | INT_CONST:i SEMI
	     {: RESULT = new int_const(curr_lineno(), i); :}

           | STR_CONST:s SEMI
	     {: RESULT = new string_const(curr_lineno(), s); :}

           | BOOL_CONST:b SEMI
	     {: RESULT = new bool_const(curr_lineno(), b); :}
	   | error SEMI
	   ;


expression 
	   ::= OBJECTID:o ASSIGN expression:e
	       {: RESULT = new assign(curr_lineno(), o, e); :}
	   |  OBJECTID ASSIGN error 

     	   | expression:e AT TYPEID:t DOT OBJECTID:o LPAREN  expression_list:el RPAREN
	     {: RESULT = new static_dispatch(curr_lineno(), e, t, o, el);  :}  		  
     	   | expression:e AT TYPEID:t DOT OBJECTID:o LPAREN  dummy_expression_list:el RPAREN
	     {: RESULT = new static_dispatch(curr_lineno(), e, t, o, el); :}
	     
     	   | expression:e DOT OBJECTID:o LPAREN  expression_list:el RPAREN
	     {: RESULT = new dispatch(curr_lineno(), e, o, el); :} 
      	   | expression:e DOT OBJECTID:o LPAREN dummy_expression_list:el RPAREN
	     {: RESULT = new dispatch(curr_lineno(), e, o, el); :} 
   
           | OBJECTID:o LPAREN expression_list:el RPAREN
	     {: RESULT = new dispatch(curr_lineno(), (Expression) new object(curr_lineno(), AbstractTable.idtable.addString("self")), o, el); :}
           | OBJECTID:o LPAREN dummy_expression_list:el RPAREN
	     {: RESULT = new dispatch(curr_lineno(), (Expression) new object(curr_lineno(), AbstractTable.idtable.addString("self")), o, el);  :}
   
           | IF expression:e1 THEN expression:e2 ELSE expression:e3 FI
	     {: RESULT = new cond(curr_lineno(), e1, e2, e3); :}

           | WHILE expression:e1 LOOP expression:e2 POOL
	     {: RESULT = new loop(curr_lineno(), e1, e2); :}

           | LBRACE block_expression_list:e RBRACE		//current debugging
	     {: RESULT = new block(curr_lineno(), e); :}

           /*| LET OBJECTID:o COLON TYPEID:t ASSIGN expression:e1 IN expression:e2
	     {: RESULT = new let(curr_lineno(), o, t, e1, e2); :}
	   | LET OBJECTID:o COLON TYPEID:t IN expression:e2  
	     {: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), e2); :}
	   | LET error OBJECTID:o  
	   */
	   | letexpr:e
	     {: RESULT = e; :}
	   
	   | CASE expression:e OF case_list:c ESAC
	     {: RESULT = new typcase(curr_lineno(), e, c);  :}

           | NEW TYPEID:t
	     {: RESULT = new new_(curr_lineno(), t); :}

           | ISVOID expression:e
	     {: RESULT = new isvoid(curr_lineno(), e); :}

           | expression:e1 PLUS expression:e2
	     {: RESULT = new plus(curr_lineno(), e1, e2); :}

           | expression:e1 MINUS expression:e2
	     {: RESULT = new sub(curr_lineno(), e1, e2); :}

           | expression:e1 MULT expression:e2
	     {: RESULT = new mul(curr_lineno(), e1, e2); :}

           | expression:e1 DIV expression:e2
	     {: RESULT = new divide(curr_lineno(), e1, e2); :}

           | NEG expression:e
	     {: RESULT = new neg(curr_lineno(), e); :}

           | expression:e1 LE expression:e2
	     {: RESULT = new leq(curr_lineno(), e1, e2); :}

           | expression:e1 LT expression:e2
	     {: RESULT = new lt(curr_lineno(), e1, e2); :}

           | expression:e1 EQ expression:e2
	     {: RESULT = new eq(curr_lineno(), e1, e2); :}

           | NOT expression:e
	     {: RESULT = new comp(curr_lineno(), e); :}

           | LPAREN expression:e RPAREN
	     {: RESULT = e; :}
     
           | OBJECTID:o	     
	     {: RESULT = new object(curr_lineno(), o); :}

           | INT_CONST:i
	     {: RESULT = new int_const(curr_lineno(), i); :}

           | STR_CONST:s
	     {: RESULT = new string_const(curr_lineno(), s); :}

           | BOOL_CONST:b
	     {: RESULT = new bool_const(curr_lineno(), b); :}
	   ;

case 
	::= OBJECTID:o COLON TYPEID:t DARROW expression:e SEMI
	    {: RESULT = new branch(curr_lineno(), o, t, e); :}
	;
    
case_list
	::= case:c 
	    {: RESULT = (new Cases(curr_lineno())).appendElement(c); :}
 	| case_list:cl case:c  
	  {: RESULT = cl.appendElement(c); :}
	;

/*letexpr
	::=  {: Stack letInitStack = new Stack(); :}
	     LET letexpr_init_list IN expression:bodyexpr
	     {: 
	     	if (!letInitStack.isEmpty()) {
		   Expression currletexpr = null;
	     	   Expression nestedlet = null;
		
		   LetInitObj letInit = (LetInitObj) letInitStack.pop();
		   if (letInit.initexpr == null)
		      currletexpr = (Expression) new let(letInit.linenum, letInit.id, letInit.type, new no_expr(letInit.linenum), bodyexpr);
		   else currletexpr = (Expression) new let(letInit.linenum, letInit.id, letInit.type, letInit.initexpr, bodyexpr);
		
		   nestedlet = currletexpr;
		   while (!letInitStack.isEmpty()) {
		      	 letInit = (LetInitObj) letInitStack.pop();
		      	 if (letInit.initexpr == null)
		      	    currletexpr = (Expression) new let(letInit.linenum, letInit.id, letInit.type, new no_expr(letInit.linenum), nestedlet);
		      	 else currletexpr = (Expression) new let(letInit.linenum, letInit.id, letInit.type, letInit.initexpr, nestedlet);	    
		      	 nestedlet = currletexpr;	
		   }
		   RESULT = (let) currletexpr;
		 }
	     :}
	;

letexpr_init_list
	::= letexpr_init
	| letexpr_init_list COMMA letexpr_init
	| error COMMA
	;

letexpr_init
	::= OBJECTID:o COLON TYPEID:t ASSIGN expression:e
	    {: letInitStack.push(new LetInitObj(curr_lineno(), o, t, e));  :}
	| OBJECTID:o COLON TYPEID:t
	  {: letInitStack.push(new LetInitObj(curr_lineno(), o, t, null));  :}
	; 


letexpr
	::= LET letexpr_init_list IN expression:bodyexpr
	 {: RESULT = new let(curr_lineno(), RESULT.id, RESULT.type, RESULT.initexpr, bodyexpr); System.out.println("letInit:"+RESULT.id); :}
	;

letexpr_init_list
	::= OBJECTID:o COLON TYPEID:t ASSIGN expression:e  
	    {: RESULT = new LetInit(curr_lineno(), o, t, e);  :}
	| OBJECTID:o COLON TYPEID:t  
	  {: RESULT = new LetInit(curr_lineno(), o, t, null);  :}
	| letexpr_init_list COMMA letexpr_init:e
	  {: if (RESULT.initexpr == null) RESULT = new let(curr_lineno(), RESULT.id, RESULT.type, new no_expr(curr_lineno()), e); 
	     else RESULT = new let(curr_lineno(), RESULT.id, RESULT.type, RESULT.initexpr, e);
	  :}
	| error COMMA
	;

letexpr_init
	::= OBJECTID:o COLON TYPEID:t ASSIGN expression:e
	    {: RESULT = new LetInit(curr_lineno(), o, t, e);  :}
	| OBJECTID:o COLON TYPEID:t
	{: RESULT = new LetInit(curr_lineno(), o, t, null);  :}
	; 

*/
letexpr	
	::= LET OBJECTID:o COLON TYPEID:t letexpr_init:e	
	 {: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), e); :}
	 | LET OBJECTID:o COLON TYPEID:t ASSIGN expression:e1 letexpr_init:e2
	   {: RESULT = new let(curr_lineno(), o, t, e1, e2); :}
	 | LET OBJECTID:o COLON TYPEID:t IN expression:e
	   {: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), e); :}
	 | LET OBJECTID:o COLON TYPEID:t ASSIGN expression:e1 IN expression:e2
	   {: RESULT = new let(curr_lineno(), o, t, e1, e2); :}
	;

letexpr_init	/* multiple let identifiers are transformed to single let identifier, 
		example: let x: Int, y: Int, z: Int in e <=> let x: Int in (let y: Int in (let z: Int in e))) */
	::= COMMA OBJECTID:o COLON TYPEID:t letexpr_init:e
	    {: RESULT = new let(curr_lineno(), o, t, new no_expr(curr_lineno()), e);  :}
	| COMMA OBJECTID:o COLON TYPEID:t ASSIGN expression:e1 letexpr_init:e2
	  {: RESULT = new let(curr_lineno(), o, t, e1, e2);  :}
	| IN expression:e
	  {: RESULT = e; :}
	| error letexpr_init
	; 


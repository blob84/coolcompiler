/*
 *  The scanner definition for COOL.
 */
import java_cup.runtime.Symbol;


class CoolLexer implements java_cup.runtime.Scanner {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 128;
	private final int YY_EOF = 129;

/*  Stuff enclosed in %{ %} is copied verbatim to the lexer class
 *  definition, all the extra variables/functions you want to use in the
 *  lexer actions should go here.  Don't remove or modify anything that
 *  was there initially.  */
    // Max size of string constants
    static int MAX_STR_CONST = 1025;
    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();
    private int curr_lineno = 1;
    int get_curr_lineno() {
	return curr_lineno;
    }
    private AbstractSymbol filename;
    void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }
    AbstractSymbol curr_filename() {
	return filename;
    }
    StringBuffer string = new StringBuffer();
    private int nested = 0;
    public static String error_msg = "";
    public static final int MAX_LEN_STRING = 1024;
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	CoolLexer (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	CoolLexer (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private CoolLexer () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;

/*  Stuff enclosed in %init{ %init} is copied verbatim to the lexer
 *  class constructor, all the extra initialization you want to do should
 *  go here.  Don't remove or modify anything that was there initially. */
    // empty for now
	}

	private boolean yy_eof_done = false;
	private final int MULTILINE_COMMENT = 3;
	private final int STRING = 1;
	private final int LINE_COMMENT = 2;
	private final int YYINITIAL = 0;
	private final int NULLCHAR = 4;
	private final int yy_state_dtrans[] = {
		0,
		238,
		73,
		241,
		244
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr=true;
			} else yy_last_was_cr=false;
		}
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NO_ANCHOR,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NO_ANCHOR,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NO_ANCHOR,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NO_ANCHOR,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NO_ANCHOR,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NO_ANCHOR,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NO_ANCHOR,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NO_ANCHOR,
		/* 59 */ YY_NO_ANCHOR,
		/* 60 */ YY_NO_ANCHOR,
		/* 61 */ YY_NO_ANCHOR,
		/* 62 */ YY_NO_ANCHOR,
		/* 63 */ YY_NO_ANCHOR,
		/* 64 */ YY_NO_ANCHOR,
		/* 65 */ YY_NO_ANCHOR,
		/* 66 */ YY_NO_ANCHOR,
		/* 67 */ YY_NO_ANCHOR,
		/* 68 */ YY_NO_ANCHOR,
		/* 69 */ YY_NO_ANCHOR,
		/* 70 */ YY_NO_ANCHOR,
		/* 71 */ YY_NO_ANCHOR,
		/* 72 */ YY_NO_ANCHOR,
		/* 73 */ YY_NO_ANCHOR,
		/* 74 */ YY_NO_ANCHOR,
		/* 75 */ YY_NO_ANCHOR,
		/* 76 */ YY_NO_ANCHOR,
		/* 77 */ YY_NO_ANCHOR,
		/* 78 */ YY_NO_ANCHOR,
		/* 79 */ YY_NO_ANCHOR,
		/* 80 */ YY_NO_ANCHOR,
		/* 81 */ YY_NO_ANCHOR,
		/* 82 */ YY_NO_ANCHOR,
		/* 83 */ YY_NOT_ACCEPT,
		/* 84 */ YY_NO_ANCHOR,
		/* 85 */ YY_NO_ANCHOR,
		/* 86 */ YY_NO_ANCHOR,
		/* 87 */ YY_NO_ANCHOR,
		/* 88 */ YY_NO_ANCHOR,
		/* 89 */ YY_NO_ANCHOR,
		/* 90 */ YY_NO_ANCHOR,
		/* 91 */ YY_NO_ANCHOR,
		/* 92 */ YY_NO_ANCHOR,
		/* 93 */ YY_NO_ANCHOR,
		/* 94 */ YY_NO_ANCHOR,
		/* 95 */ YY_NO_ANCHOR,
		/* 96 */ YY_NO_ANCHOR,
		/* 97 */ YY_NO_ANCHOR,
		/* 98 */ YY_NO_ANCHOR,
		/* 99 */ YY_NO_ANCHOR,
		/* 100 */ YY_NO_ANCHOR,
		/* 101 */ YY_NO_ANCHOR,
		/* 102 */ YY_NO_ANCHOR,
		/* 103 */ YY_NO_ANCHOR,
		/* 104 */ YY_NO_ANCHOR,
		/* 105 */ YY_NO_ANCHOR,
		/* 106 */ YY_NO_ANCHOR,
		/* 107 */ YY_NO_ANCHOR,
		/* 108 */ YY_NO_ANCHOR,
		/* 109 */ YY_NO_ANCHOR,
		/* 110 */ YY_NO_ANCHOR,
		/* 111 */ YY_NO_ANCHOR,
		/* 112 */ YY_NOT_ACCEPT,
		/* 113 */ YY_NO_ANCHOR,
		/* 114 */ YY_NO_ANCHOR,
		/* 115 */ YY_NO_ANCHOR,
		/* 116 */ YY_NO_ANCHOR,
		/* 117 */ YY_NO_ANCHOR,
		/* 118 */ YY_NO_ANCHOR,
		/* 119 */ YY_NO_ANCHOR,
		/* 120 */ YY_NO_ANCHOR,
		/* 121 */ YY_NO_ANCHOR,
		/* 122 */ YY_NO_ANCHOR,
		/* 123 */ YY_NO_ANCHOR,
		/* 124 */ YY_NO_ANCHOR,
		/* 125 */ YY_NO_ANCHOR,
		/* 126 */ YY_NO_ANCHOR,
		/* 127 */ YY_NO_ANCHOR,
		/* 128 */ YY_NO_ANCHOR,
		/* 129 */ YY_NO_ANCHOR,
		/* 130 */ YY_NO_ANCHOR,
		/* 131 */ YY_NO_ANCHOR,
		/* 132 */ YY_NO_ANCHOR,
		/* 133 */ YY_NO_ANCHOR,
		/* 134 */ YY_NO_ANCHOR,
		/* 135 */ YY_NOT_ACCEPT,
		/* 136 */ YY_NO_ANCHOR,
		/* 137 */ YY_NO_ANCHOR,
		/* 138 */ YY_NO_ANCHOR,
		/* 139 */ YY_NO_ANCHOR,
		/* 140 */ YY_NO_ANCHOR,
		/* 141 */ YY_NO_ANCHOR,
		/* 142 */ YY_NO_ANCHOR,
		/* 143 */ YY_NO_ANCHOR,
		/* 144 */ YY_NO_ANCHOR,
		/* 145 */ YY_NO_ANCHOR,
		/* 146 */ YY_NO_ANCHOR,
		/* 147 */ YY_NO_ANCHOR,
		/* 148 */ YY_NO_ANCHOR,
		/* 149 */ YY_NO_ANCHOR,
		/* 150 */ YY_NO_ANCHOR,
		/* 151 */ YY_NOT_ACCEPT,
		/* 152 */ YY_NO_ANCHOR,
		/* 153 */ YY_NO_ANCHOR,
		/* 154 */ YY_NO_ANCHOR,
		/* 155 */ YY_NO_ANCHOR,
		/* 156 */ YY_NOT_ACCEPT,
		/* 157 */ YY_NO_ANCHOR,
		/* 158 */ YY_NO_ANCHOR,
		/* 159 */ YY_NO_ANCHOR,
		/* 160 */ YY_NOT_ACCEPT,
		/* 161 */ YY_NO_ANCHOR,
		/* 162 */ YY_NO_ANCHOR,
		/* 163 */ YY_NOT_ACCEPT,
		/* 164 */ YY_NO_ANCHOR,
		/* 165 */ YY_NO_ANCHOR,
		/* 166 */ YY_NOT_ACCEPT,
		/* 167 */ YY_NO_ANCHOR,
		/* 168 */ YY_NO_ANCHOR,
		/* 169 */ YY_NOT_ACCEPT,
		/* 170 */ YY_NO_ANCHOR,
		/* 171 */ YY_NO_ANCHOR,
		/* 172 */ YY_NOT_ACCEPT,
		/* 173 */ YY_NO_ANCHOR,
		/* 174 */ YY_NO_ANCHOR,
		/* 175 */ YY_NOT_ACCEPT,
		/* 176 */ YY_NO_ANCHOR,
		/* 177 */ YY_NO_ANCHOR,
		/* 178 */ YY_NOT_ACCEPT,
		/* 179 */ YY_NO_ANCHOR,
		/* 180 */ YY_NO_ANCHOR,
		/* 181 */ YY_NOT_ACCEPT,
		/* 182 */ YY_NO_ANCHOR,
		/* 183 */ YY_NO_ANCHOR,
		/* 184 */ YY_NOT_ACCEPT,
		/* 185 */ YY_NO_ANCHOR,
		/* 186 */ YY_NO_ANCHOR,
		/* 187 */ YY_NOT_ACCEPT,
		/* 188 */ YY_NO_ANCHOR,
		/* 189 */ YY_NO_ANCHOR,
		/* 190 */ YY_NOT_ACCEPT,
		/* 191 */ YY_NO_ANCHOR,
		/* 192 */ YY_NO_ANCHOR,
		/* 193 */ YY_NOT_ACCEPT,
		/* 194 */ YY_NO_ANCHOR,
		/* 195 */ YY_NO_ANCHOR,
		/* 196 */ YY_NOT_ACCEPT,
		/* 197 */ YY_NO_ANCHOR,
		/* 198 */ YY_NO_ANCHOR,
		/* 199 */ YY_NOT_ACCEPT,
		/* 200 */ YY_NO_ANCHOR,
		/* 201 */ YY_NO_ANCHOR,
		/* 202 */ YY_NOT_ACCEPT,
		/* 203 */ YY_NO_ANCHOR,
		/* 204 */ YY_NO_ANCHOR,
		/* 205 */ YY_NOT_ACCEPT,
		/* 206 */ YY_NO_ANCHOR,
		/* 207 */ YY_NO_ANCHOR,
		/* 208 */ YY_NOT_ACCEPT,
		/* 209 */ YY_NO_ANCHOR,
		/* 210 */ YY_NO_ANCHOR,
		/* 211 */ YY_NOT_ACCEPT,
		/* 212 */ YY_NO_ANCHOR,
		/* 213 */ YY_NO_ANCHOR,
		/* 214 */ YY_NOT_ACCEPT,
		/* 215 */ YY_NO_ANCHOR,
		/* 216 */ YY_NO_ANCHOR,
		/* 217 */ YY_NOT_ACCEPT,
		/* 218 */ YY_NO_ANCHOR,
		/* 219 */ YY_NO_ANCHOR,
		/* 220 */ YY_NOT_ACCEPT,
		/* 221 */ YY_NO_ANCHOR,
		/* 222 */ YY_NO_ANCHOR,
		/* 223 */ YY_NOT_ACCEPT,
		/* 224 */ YY_NO_ANCHOR,
		/* 225 */ YY_NO_ANCHOR,
		/* 226 */ YY_NOT_ACCEPT,
		/* 227 */ YY_NO_ANCHOR,
		/* 228 */ YY_NO_ANCHOR,
		/* 229 */ YY_NOT_ACCEPT,
		/* 230 */ YY_NO_ANCHOR,
		/* 231 */ YY_NO_ANCHOR,
		/* 232 */ YY_NOT_ACCEPT,
		/* 233 */ YY_NO_ANCHOR,
		/* 234 */ YY_NO_ANCHOR,
		/* 235 */ YY_NOT_ACCEPT,
		/* 236 */ YY_NO_ANCHOR,
		/* 237 */ YY_NO_ANCHOR,
		/* 238 */ YY_NOT_ACCEPT,
		/* 239 */ YY_NO_ANCHOR,
		/* 240 */ YY_NO_ANCHOR,
		/* 241 */ YY_NOT_ACCEPT,
		/* 242 */ YY_NO_ANCHOR,
		/* 243 */ YY_NO_ANCHOR,
		/* 244 */ YY_NOT_ACCEPT,
		/* 245 */ YY_NO_ANCHOR,
		/* 246 */ YY_NO_ANCHOR,
		/* 247 */ YY_NO_ANCHOR,
		/* 248 */ YY_NO_ANCHOR,
		/* 249 */ YY_NO_ANCHOR,
		/* 250 */ YY_NO_ANCHOR,
		/* 251 */ YY_NO_ANCHOR,
		/* 252 */ YY_NO_ANCHOR,
		/* 253 */ YY_NO_ANCHOR,
		/* 254 */ YY_NO_ANCHOR,
		/* 255 */ YY_NO_ANCHOR,
		/* 256 */ YY_NO_ANCHOR,
		/* 257 */ YY_NO_ANCHOR,
		/* 258 */ YY_NO_ANCHOR,
		/* 259 */ YY_NO_ANCHOR,
		/* 260 */ YY_NO_ANCHOR,
		/* 261 */ YY_NO_ANCHOR,
		/* 262 */ YY_NO_ANCHOR,
		/* 263 */ YY_NO_ANCHOR,
		/* 264 */ YY_NO_ANCHOR,
		/* 265 */ YY_NO_ANCHOR,
		/* 266 */ YY_NO_ANCHOR,
		/* 267 */ YY_NO_ANCHOR,
		/* 268 */ YY_NO_ANCHOR,
		/* 269 */ YY_NO_ANCHOR,
		/* 270 */ YY_NO_ANCHOR,
		/* 271 */ YY_NO_ANCHOR,
		/* 272 */ YY_NO_ANCHOR,
		/* 273 */ YY_NO_ANCHOR,
		/* 274 */ YY_NO_ANCHOR,
		/* 275 */ YY_NO_ANCHOR,
		/* 276 */ YY_NO_ANCHOR,
		/* 277 */ YY_NO_ANCHOR,
		/* 278 */ YY_NO_ANCHOR,
		/* 279 */ YY_NO_ANCHOR,
		/* 280 */ YY_NO_ANCHOR,
		/* 281 */ YY_NO_ANCHOR,
		/* 282 */ YY_NO_ANCHOR,
		/* 283 */ YY_NO_ANCHOR,
		/* 284 */ YY_NO_ANCHOR,
		/* 285 */ YY_NO_ANCHOR,
		/* 286 */ YY_NO_ANCHOR,
		/* 287 */ YY_NO_ANCHOR,
		/* 288 */ YY_NO_ANCHOR,
		/* 289 */ YY_NO_ANCHOR,
		/* 290 */ YY_NO_ANCHOR,
		/* 291 */ YY_NO_ANCHOR,
		/* 292 */ YY_NO_ANCHOR,
		/* 293 */ YY_NO_ANCHOR,
		/* 294 */ YY_NO_ANCHOR,
		/* 295 */ YY_NO_ANCHOR,
		/* 296 */ YY_NO_ANCHOR,
		/* 297 */ YY_NO_ANCHOR,
		/* 298 */ YY_NO_ANCHOR,
		/* 299 */ YY_NO_ANCHOR,
		/* 300 */ YY_NO_ANCHOR,
		/* 301 */ YY_NO_ANCHOR,
		/* 302 */ YY_NO_ANCHOR,
		/* 303 */ YY_NO_ANCHOR,
		/* 304 */ YY_NO_ANCHOR,
		/* 305 */ YY_NO_ANCHOR,
		/* 306 */ YY_NO_ANCHOR,
		/* 307 */ YY_NO_ANCHOR,
		/* 308 */ YY_NO_ANCHOR,
		/* 309 */ YY_NO_ANCHOR,
		/* 310 */ YY_NO_ANCHOR,
		/* 311 */ YY_NOT_ACCEPT,
		/* 312 */ YY_NO_ANCHOR,
		/* 313 */ YY_NO_ANCHOR,
		/* 314 */ YY_NO_ANCHOR,
		/* 315 */ YY_NO_ANCHOR,
		/* 316 */ YY_NOT_ACCEPT,
		/* 317 */ YY_NO_ANCHOR,
		/* 318 */ YY_NO_ANCHOR,
		/* 319 */ YY_NO_ANCHOR,
		/* 320 */ YY_NO_ANCHOR,
		/* 321 */ YY_NO_ANCHOR,
		/* 322 */ YY_NO_ANCHOR,
		/* 323 */ YY_NOT_ACCEPT,
		/* 324 */ YY_NO_ANCHOR,
		/* 325 */ YY_NO_ANCHOR,
		/* 326 */ YY_NO_ANCHOR,
		/* 327 */ YY_NO_ANCHOR,
		/* 328 */ YY_NO_ANCHOR,
		/* 329 */ YY_NO_ANCHOR,
		/* 330 */ YY_NO_ANCHOR,
		/* 331 */ YY_NO_ANCHOR,
		/* 332 */ YY_NO_ANCHOR,
		/* 333 */ YY_NO_ANCHOR,
		/* 334 */ YY_NO_ANCHOR,
		/* 335 */ YY_NO_ANCHOR,
		/* 336 */ YY_NO_ANCHOR,
		/* 337 */ YY_NO_ANCHOR,
		/* 338 */ YY_NO_ANCHOR,
		/* 339 */ YY_NO_ANCHOR,
		/* 340 */ YY_NO_ANCHOR,
		/* 341 */ YY_NO_ANCHOR,
		/* 342 */ YY_NO_ANCHOR,
		/* 343 */ YY_NO_ANCHOR,
		/* 344 */ YY_NO_ANCHOR,
		/* 345 */ YY_NO_ANCHOR,
		/* 346 */ YY_NO_ANCHOR,
		/* 347 */ YY_NO_ANCHOR,
		/* 348 */ YY_NO_ANCHOR,
		/* 349 */ YY_NO_ANCHOR,
		/* 350 */ YY_NO_ANCHOR,
		/* 351 */ YY_NO_ANCHOR,
		/* 352 */ YY_NO_ANCHOR,
		/* 353 */ YY_NO_ANCHOR,
		/* 354 */ YY_NO_ANCHOR,
		/* 355 */ YY_NO_ANCHOR,
		/* 356 */ YY_NO_ANCHOR,
		/* 357 */ YY_NO_ANCHOR,
		/* 358 */ YY_NO_ANCHOR,
		/* 359 */ YY_NO_ANCHOR,
		/* 360 */ YY_NO_ANCHOR,
		/* 361 */ YY_NO_ANCHOR,
		/* 362 */ YY_NO_ANCHOR,
		/* 363 */ YY_NO_ANCHOR,
		/* 364 */ YY_NO_ANCHOR,
		/* 365 */ YY_NO_ANCHOR,
		/* 366 */ YY_NO_ANCHOR,
		/* 367 */ YY_NO_ANCHOR,
		/* 368 */ YY_NO_ANCHOR,
		/* 369 */ YY_NO_ANCHOR,
		/* 370 */ YY_NO_ANCHOR,
		/* 371 */ YY_NO_ANCHOR,
		/* 372 */ YY_NO_ANCHOR,
		/* 373 */ YY_NO_ANCHOR,
		/* 374 */ YY_NO_ANCHOR,
		/* 375 */ YY_NO_ANCHOR,
		/* 376 */ YY_NO_ANCHOR,
		/* 377 */ YY_NO_ANCHOR,
		/* 378 */ YY_NO_ANCHOR,
		/* 379 */ YY_NO_ANCHOR,
		/* 380 */ YY_NO_ANCHOR,
		/* 381 */ YY_NO_ANCHOR,
		/* 382 */ YY_NO_ANCHOR,
		/* 383 */ YY_NO_ANCHOR,
		/* 384 */ YY_NO_ANCHOR,
		/* 385 */ YY_NO_ANCHOR,
		/* 386 */ YY_NO_ANCHOR,
		/* 387 */ YY_NO_ANCHOR,
		/* 388 */ YY_NO_ANCHOR,
		/* 389 */ YY_NO_ANCHOR,
		/* 390 */ YY_NO_ANCHOR,
		/* 391 */ YY_NO_ANCHOR,
		/* 392 */ YY_NO_ANCHOR,
		/* 393 */ YY_NO_ANCHOR,
		/* 394 */ YY_NO_ANCHOR,
		/* 395 */ YY_NO_ANCHOR,
		/* 396 */ YY_NO_ANCHOR,
		/* 397 */ YY_NO_ANCHOR,
		/* 398 */ YY_NO_ANCHOR,
		/* 399 */ YY_NO_ANCHOR,
		/* 400 */ YY_NO_ANCHOR,
		/* 401 */ YY_NO_ANCHOR,
		/* 402 */ YY_NO_ANCHOR,
		/* 403 */ YY_NO_ANCHOR,
		/* 404 */ YY_NO_ANCHOR,
		/* 405 */ YY_NO_ANCHOR,
		/* 406 */ YY_NO_ANCHOR
	};
	private int yy_cmap[] = unpackFromString(1,130,
"38,63:8,65,32,66:2,33,63:18,65,63,30,63:5,3,4,7,8,16,9,12,10,46:10,14,13,11" +
",1,2,63,15,41,61,28,44,21,43,61,20,40,61:2,42,64,19,26,25,61,22,24,23,48,45" +
",47,61,39,61,63,31,63:2,62,63,29,36,49,50,51,37,52,53,18,52:2,27,52,35,54,5" +
"5,52,56,57,34,58,59,60,52:3,5,63,6,17,63,0:2")[0];

	private int yy_rmap[] = unpackFromString(1,407,
"0,1,2,1,3,1:3,4,1,5,6,7,1:6,8,9,1:3,10,11,1:6,12,13,14,13,15:2,16,14:3,15,1" +
"4,16,14,16,14:2,16:2,1:2,17,18,19,1:4,20,1:12,21,1:2,22,23,1:5,24,25,26,27," +
"28,14,15,14:3,15:4,14,15:5,14:2,29,1,30,29,6,1,6,31,32,33,34,15,13,15,16:2," +
"14,16:5,14,16:3,15:2,35,36,37,38,39,16,13:10,40,41,42,43,44,45,46,47,48,49," +
"50,51,52,14,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73," +
"74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98," +
"99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,16,114,115,116,1" +
"17,118,119,120,17,121,122,123,124,125,126,127,128,129,130,131,132,133,134,1" +
"35,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153," +
"154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172" +
",173,174,175,176,177,178,179,180,181,182,183,15,184,16:2,13:5,185,13,186,18" +
"7,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,2" +
"06,207,208,209,210,211,212,213,214,215,216,137,217,218,219,220,221,222,223," +
"224,225,226,14,16,227,228,229,230,231,232,233,234,235,236,237,238,239,240,2" +
"41,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259," +
"260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278" +
",279,280,281,282")[0];

	private int yy_nxt[][] = unpackFromString(283,67,
"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,296,327,296,335,296,339," +
"86,85,341,306,21,3,22,23,329,336,306,113,3,296,114,296,343,137,345,296,24,3" +
"47,296,340,342,344,306:2,136,346,306:4,348,296,3:2,296,25,23,-1:69,26,-1:71" +
",27,-1:63,28,-1:71,29,-1:67,83,-1:57,30,-1:7,31,-1:75,306,32,350:4,351,350:" +
"2,306,350,306,-1:4,306,297,306,33,-1,350:4,298,350:5,306:8,352,306:3,350:2," +
"-1,350,-1:20,349,296:2,153,296:4,158,349,296,349,-1:4,349:4,-1,296:7,162,29" +
"6:2,349:2,165,349:2,168,349:6,296,162,-1,296,-1:48,24,-1:85,25,-1:19,224,35" +
"0,310,350:6,224,350,224,-1:4,224:4,-1,350:10,224:4,310,224:7,350:2,-1,350,-" +
"1:20,306,350:8,306,350,306,-1:4,306:4,-1,350:10,306:12,350:2,-1,350,-1:20,3" +
"49,162:8,349,162,349,-1:4,349:4,-1,162:10,349:12,162:2,-1,162,-1:20,349,296" +
":8,349,296,349,-1:4,349:4,-1,296:7,162,296:2,349:12,296,162,-1,296,-1:20,22" +
"4,350:8,224,350,224,-1:4,224:4,-1,350:10,224:12,350:2,-1,350,-1:3,56:2,232:" +
"2,56:2,-1,56:24,-1,56:34,-1,106:2,-1,58,106:2,54,106:24,-1,106:34,-1:3,235:" +
"2,-1:63,60:29,-1:3,60:5,-1,60:28,1,108:9,394,108:21,74,-1,108:33,-1:7,79,-1" +
":63,80,-1:73,112,-1:56,64:29,65,66,67,64,68,69,70,71,72,64:28,-1:18,306,350" +
":2,152,350:4,157,306,350,306,-1:4,306:4,-1,350:10,306:2,161,306:2,164,306:6" +
",350:2,-1,350,-1:20,349,296:8,349,296,349,-1:4,349:3,34,-1,296:4,89,296:2,1" +
"62,296:2,349:12,296,162,-1,296,-1:20,349,296,252,296:6,349,296,349,-1:4,349" +
":4,-1,296:7,162,296:2,349:4,254,349:7,296,162,-1,296,-1:3,108:31,-1:2,108:3" +
"3,-1,60:29,-1:3,60:5,51,60:28,-1:39,135,-1:24,151,-1:20,35,350:8,306,350,19" +
"1,-1:4,306:4,-1,350,299,194,350:7,306:12,350:2,-1,350,-1:20,349,87,296:4,19" +
"5,296:2,349,296,349,-1:4,349,115,349,88,-1,296:4,116,296:2,162,296:2,349:8," +
"198,349:3,296,162,-1,296,-1:20,349,162,254,162:6,349,162,349,-1:4,349:4,-1," +
"162:10,349:4,254,349:7,162:2,-1,162,-1:3,149:2,60:2,149:2,154,149:22,53:2,5" +
"5,149:5,53,149:28,-1,108:31,-1:2,108:4,105,108:28,-1:39,156,-1:45,306,350:8" +
",306,350,306,-1:4,306:3,117,-1,350:4,138,350:5,306:12,350:2,-1,350,-1:20,90" +
",296:8,349,296,349,-1:4,349:4,-1,296,118,296:5,162,296:2,349:12,296,162,-1," +
"296,-1:3,60:2,149:2,60:25,56:2,-1,60:5,56,60:28,-1,155:2,108:2,155:2,159,15" +
"5:24,55,53,155:33,-1:48,160,-1:36,224,350:4,38,350:3,224,350,224,-1:4,38,22" +
"4:3,-1,350:10,224:12,350:2,-1,350,-1:20,349,296:8,349,296,349,-1:4,349:4,-1" +
",296:7,162,36,296,349:11,91,296,162,-1,296,-1:3,60:6,154,60:22,106:2,-1,60:" +
"5,106,60:28,-1,108:2,155:2,108:27,-1,56,108:33,-1:40,163,-1:44,224,350:7,22" +
"7,224,350,224,-1:4,224:4,-1,350:10,224:5,227,224:6,350:2,-1,350,-1:20,349,2" +
"96:4,37,296:3,349,296,349,-1:4,92,349:3,-1,296:7,162,296:2,349:12,296,162,-" +
"1,296,-1:3,108:6,159,108:24,-1,106,108:33,-1:42,166,-1:42,306,350:4,38,350:" +
"3,306,350,306,-1:4,300,306:3,-1,350:10,306:12,350:2,-1,350,-1:21,169,-1:65," +
"306,350:7,227,306,350,306,-1:4,306:4,-1,350:10,306:5,230,306:6,350:2,-1,350" +
",-1:20,349,162:8,349,162,349,-1:4,349:4,-1,162:8,91,162,349:11,91,162:2,-1," +
"162,-1:25,311,-1:61,224,350:2,233,350:5,224,350,224,-1:4,224:4,-1,350:10,22" +
"4:2,233,224:9,350:2,-1,350,-1:20,349,162:4,92,162:3,349,162,349,-1:4,92,349" +
":3,-1,162:10,349:12,162:2,-1,162,-1:42,172,-1:44,224,350:8,224,350,224,-1:4" +
",224:4,-1,350:9,236,224:9,236,224:2,350:2,-1,350,-1:20,349,296:8,349,296,21" +
"9,-1:4,349:4,-1,296:2,222,296:4,162,296:2,349:12,296,162,-1,296,-1:25,178,-" +
"1:61,306,350:2,233,350:5,306,350,306,-1:4,306:4,-1,350:10,306:2,239,306:9,3" +
"50:2,-1,350,-1:20,349,162:5,225,162:2,349,162,349,-1:4,349:4,-1,162:10,349:" +
"8,225,349:3,162:2,-1,162,-1:44,316,-1:42,306,350:8,306,350,306,-1:4,306:4,-" +
"1,350:9,236,306:9,242,306:2,350:2,-1,350,-1:20,349,296:5,228,296:2,349,296," +
"349,-1:4,349:4,-1,296:7,162,296:2,349:8,225,349:3,296,162,-1,296,-1:42,181," +
"-1:44,224,350:8,224,350,224,-1:4,224:4,-1,350:8,119,350,224:11,119,350:2,-1" +
",350,-1:20,349,162:8,349,162,219,-1:4,349:4,-1,162:2,219,162:7,349:12,162:2" +
",-1,162,-1:43,187,-1:43,224,350:4,120,350:3,224,350,224,-1:4,120,224:3,-1,3" +
"50:10,224:12,350:2,-1,350,-1:20,349,296:2,231,296:5,349,296,349,-1:4,349:4," +
"-1,296:7,162,296:2,349:2,234,349:9,296,162,-1,296,-1:21,190,-1:65,306,350:8" +
",306,350,306,-1:4,306:4,-1,350:8,119,350,306:11,139,350:2,-1,350,-1:20,349," +
"162:2,234,162:5,349,162,349,-1:4,349:4,-1,162:10,349:2,234,349:9,162:2,-1,1" +
"62,-1:44,193,-1:42,306,350:4,120,350:3,306,350,306,-1:4,140,306:3,-1,350:10" +
",306:12,350:2,-1,350,-1:20,349,296:7,237,349,296,349,-1:4,349:4,-1,296:7,16" +
"2,296:2,349:5,240,349:6,296,162,-1,296,-1:23,196,-1:63,306,350:8,333,350,30" +
"6,-1:4,306:4,-1,350:3,334,350:6,306:12,350:2,-1,350,-1:20,349,162:7,240,349" +
",162,349,-1:4,349:4,-1,162:10,349:5,240,349:6,162:2,-1,162,-1:4,199,-1:82,2" +
"24,350:8,334,350,224,-1:4,224:4,-1,350:3,334,350:6,224:12,350:2,-1,350,-1:2" +
"0,349,296:8,349,296,349,-1:4,349:4,-1,296:6,256,162,296:2,349:10,258,349,29" +
"6,162,-1,296,-1:64,202,-1:22,306,350:8,306,350,337,-1:4,306:4,-1,350:2,338," +
"350:7,306:12,350:2,-1,350,-1:20,349,162:8,349,162,349,-1:4,349:4,-1,162:6,2" +
"58,162:3,349:10,258,349,162:2,-1,162,-1:5,205,-1:34,51,-1:46,306,350:5,245," +
"350:2,306,350,306,-1:4,306:4,-1,350:10,306:8,247,306:3,350:2,-1,350,-1:20,3" +
"49,296:4,93,296:3,349,296,349,-1:4,121,349:3,-1,296:7,162,296:2,349:12,296," +
"162,-1,296,-1:30,208,-1:56,224,350:5,245,350:2,224,350,224,-1:4,224:4,-1,35" +
"0:10,224:8,245,224:3,350:2,-1,350,-1:20,349,162:4,121,162:3,349,162,349,-1:" +
"4,121,349:3,-1,162:10,349:12,162:2,-1,162,-1:9,52,-1:77,224,350:8,224,350,2" +
"49,-1:4,224:4,-1,350:2,338,350:7,224:12,350:2,-1,350,-1:20,349,162:8,349,16" +
"2,349,-1:4,349:4,-1,162:6,39,162:3,349:10,39,349,162:2,-1,162,-1:28,211,-1:" +
"58,306,350:8,306,350,306,-1:4,306:4,-1,350:6,122,350:3,306:10,141,306,350:2" +
",-1,350,-1:20,349,296:8,349,296,349,-1:4,349:4,-1,296:6,94,162,296:2,349:10" +
",39,349,296,162,-1,296,-1:66,323,-1:20,224,350:8,224,350,224,-1:4,224:4,-1," +
"350:6,122,350:3,224:10,122,224,350:2,-1,350,-1:20,264,296:8,349,296,349,-1:" +
"4,349:4,-1,296,266,296:5,162,296:2,349:12,296,162,-1,296,-1:23,217,-1:63,22" +
"4,350:8,224,350,251,-1:4,224:4,-1,350:2,251,350:7,224:12,350:2,-1,350,-1:20" +
",264,162:8,349,162,349,-1:4,349:4,-1,162,264,162:8,349:12,162:2,-1,162,-1:2" +
"1,220,-1:65,263,350:8,224,350,224,-1:4,224:4,-1,350,263,350:8,224:12,350:2," +
"-1,350,-1:20,349,162:8,349,40,349,-1:4,349:4,-1,162:10,40,349:11,162:2,-1,1" +
"62,-1:25,223,-1:61,265,350:8,306,350,306,-1:4,306:4,-1,350,263,350:8,306:12" +
",350:2,-1,350,-1:20,349,296:8,349,95,349,-1:4,349:4,-1,296:7,162,296:2,40,3" +
"49:11,296,162,-1,296,-1:4,226,-1:82,349,162:2,41,162:5,349,162,349,-1:4,349" +
":4,-1,162:10,349:2,41,349:9,162:2,-1,162,-1:3,53:2,229,-1,53:2,54,53:24,55," +
"53:34,-1:18,224,350:6,44,350,224,350,224,-1:4,224:4,-1,350:10,224:6,44,224:" +
"5,350:2,-1,350,-1:20,349,296:2,96,296:5,349,296,349,-1:4,349:4,-1,296:7,162" +
",296:2,349:2,41,349:9,296,162,-1,296,-1:9,57,-1:77,306,350:6,44,350,306,350" +
",306,-1:4,306:4,-1,350:10,306:6,301,306:5,350:2,-1,350,-1:20,349,42,296:7,3" +
"49,296,349,-1:4,349,97,349:2,-1,296:7,162,296:2,349:12,296,162,-1,296,-1:20" +
",224,125,350:7,224,350,224,-1:4,224,125,224:2,-1,350:10,224:12,350:2,-1,350" +
",-1:20,349,97,162:7,349,162,349,-1:4,349,97,349:2,-1,162:10,349:12,162:2,-1" +
",162,-1:5,235:2,-1:27,59,-1:52,224,350:2,46,350:5,224,350,224,-1:4,224:4,-1" +
",350:10,224:2,46,224:9,350:2,-1,350,-1:20,349,296:8,43,296,349,-1:4,349:4,-" +
"1,296:3,98,296:3,162,296:2,349:12,296,162,-1,296,-1:2,1,60:9,393,60:19,61,8" +
"4,62,60:5,63,60:28,-1:18,306,125,350:7,306,350,306,-1:4,306,144,306:2,-1,35" +
"0:10,306:12,350:2,-1,350,-1:20,349,162:8,43,162,349,-1:4,349:4,-1,162:3,43," +
"162:6,349:12,162:2,-1,162,-1:2,1,75:2,76,110,75:2,77,75:2,109,75:21,78,75:3" +
"4,-1:18,306,350:2,46,350:5,306,350,306,-1:4,306:4,-1,350:10,306:2,302,306:9" +
",350:2,-1,350,-1:20,349,162:5,268,162:2,349,162,349,-1:4,349:4,-1,162:10,34" +
"9:8,268,349:3,162:2,-1,162,-1:2,1,81:9,111,81:19,82,81,82,81:34,-1:18,224,3" +
"50:2,128,350:5,224,350,224,-1:4,224:4,-1,350:10,224:2,128,224:9,350:2,-1,35" +
"0,-1:20,349,162:2,45,162:5,349,162,349,-1:4,349:4,-1,162:10,349:2,45,349:9," +
"162:2,-1,162,-1:20,306,350:2,128,350:5,306,350,306,-1:4,306:4,-1,350:10,306" +
":2,146,306:9,350:2,-1,350,-1:20,349,296:2,100,296:5,349,296,349,-1:4,349:4," +
"-1,296:7,162,296:2,349:2,45,349:9,296,162,-1,296,-1:20,224,350:5,275,350:2," +
"224,350,224,-1:4,224:4,-1,350:10,224:8,275,224:3,350:2,-1,350,-1:20,349,296" +
":5,270,296:2,349,296,349,-1:4,349:4,-1,296:7,162,296:2,349:8,268,349:3,296," +
"162,-1,296,-1:20,224,350:8,224,123,224,-1:4,224:4,-1,350:10,123,224:11,350:" +
"2,-1,350,-1:20,349,296:2,272,296:5,349,296,349,-1:4,349:4,-1,296:7,162,296:" +
"2,349:2,274,349:9,296,162,-1,296,-1:20,224,350:2,124,350:5,224,350,224,-1:4" +
",224:4,-1,350:10,224:2,124,224:9,350:2,-1,350,-1:20,349,162:2,274,162:5,349" +
",162,349,-1:4,349:4,-1,162:10,349:2,274,349:9,162:2,-1,162,-1:20,306,350:2," +
"124,350:5,306,350,306,-1:4,306:4,-1,350:10,306:2,143,306:9,350:2,-1,350,-1:" +
"20,349,296:7,276,349,296,349,-1:4,349:4,-1,296:7,162,296:2,349:5,278,349:6," +
"296,162,-1,296,-1:20,306,350:8,306,123,306,-1:4,306:4,-1,350:10,142,306:11," +
"350:2,-1,350,-1:20,349,162:7,278,349,162,349,-1:4,349:4,-1,162:10,349:5,278" +
",349:6,162:2,-1,162,-1:20,224,350:8,126,350,224,-1:4,224:4,-1,350:3,126,350" +
":6,224:12,350:2,-1,350,-1:20,349,296:6,99,296,349,296,349,-1:4,349:4,-1,296" +
":7,162,296:2,349:6,127,349:5,296,162,-1,296,-1:20,306,350:8,145,350,306,-1:" +
"4,306:4,-1,350:3,126,350:6,306:12,350:2,-1,350,-1:20,349,162:6,127,162,349," +
"162,349,-1:4,349:4,-1,162:10,349:6,127,349:5,162:2,-1,162,-1:20,224,350:8,2" +
"79,350,224,-1:4,224:4,-1,350:3,279,350:6,224:12,350:2,-1,350,-1:20,349,162:" +
"8,280,162,349,-1:4,349:4,-1,162:3,280,162:6,349:12,162:2,-1,162,-1:20,306,3" +
"50:8,281,350,306,-1:4,306:4,-1,350:3,279,350:6,306:12,350:2,-1,350,-1:20,34" +
"9,296:8,280,296,349,-1:4,349:4,-1,296:3,282,296:3,162,296:2,349:12,296,162," +
"-1,296,-1:20,224,350:3,324,350:4,224,350,224,-1:4,224:4,-1,350:10,224:7,324" +
",224:4,350:2,-1,350,-1:20,349,162:5,47,162:2,349,162,349,-1:4,349:4,-1,162:" +
"10,349:8,47,349:3,162:2,-1,162,-1:20,283,350:8,224,350,224,-1:4,224:4,-1,35" +
"0,283,350:8,224:12,350:2,-1,350,-1:20,349,296:5,101,296:2,349,296,349,-1:4," +
"349:4,-1,296:7,162,296:2,349:8,47,349:3,296,162,-1,296,-1:20,306,350:3,324," +
"350:4,306,350,306,-1:4,306:4,-1,350:10,306:7,285,306:4,350:2,-1,350,-1:20,3" +
"49,296:3,325,296:4,349,296,349,-1:4,349:4,-1,296:7,162,296:2,349:7,326,349:" +
"4,296,162,-1,296,-1:20,287,350:8,306,350,306,-1:4,306:4,-1,350,283,350:8,30" +
"6:12,350:2,-1,350,-1:20,349,162:3,326,162:4,349,162,349,-1:4,349:4,-1,162:1" +
"0,349:7,326,349:4,162:2,-1,162,-1:20,224,350:5,129,350:2,224,350,224,-1:4,2" +
"24:4,-1,350:10,224:8,129,224:3,350:2,-1,350,-1:20,284,296:8,349,296,349,-1:" +
"4,349:4,-1,296,286,296:5,162,296:2,349:12,296,162,-1,296,-1:20,306,350:5,12" +
"9,350:2,306,350,306,-1:4,306:4,-1,350:10,306:8,147,306:3,350:2,-1,350,-1:20" +
",284,162:8,349,162,349,-1:4,349:4,-1,162,284,162:8,349:12,162:2,-1,162,-1:2" +
"0,224,350:2,130,350:5,224,350,224,-1:4,224:4,-1,350:10,224:2,130,224:9,350:" +
"2,-1,350,-1:20,349,162:2,48,162:5,349,162,349,-1:4,349:4,-1,162:10,349:2,48" +
",349:9,162:2,-1,162,-1:20,306,350:2,130,350:5,306,350,306,-1:4,306:4,-1,350" +
":10,306:2,148,306:9,350:2,-1,350,-1:20,349,296:2,102,296:5,349,296,349,-1:4" +
",349:4,-1,296:7,162,296:2,349:2,48,349:9,296,162,-1,296,-1:20,224,350:8,224" +
",350,224,-1:4,224:4,-1,350:5,49,350:4,224,49,224:10,350:2,-1,350,-1:20,349," +
"162:8,349,162,349,-1:4,349:4,-1,162:5,103,162:4,349,103,349:10,162:2,-1,162" +
",-1:20,291,350:8,306,350,306,-1:4,306:4,-1,350,289,350:8,306:12,350:2,-1,35" +
"0,-1:20,349,296:8,349,296,349,-1:4,349:4,-1,296:5,131,296,162,296:2,349,103" +
",349:10,296,162,-1,296,-1:20,306,350:8,306,350,306,-1:4,306:4,-1,350:5,49,3" +
"50:4,306,303,306:10,350:2,-1,350,-1:20,349,162:4,292,162:3,349,162,349,-1:4" +
",292,349:3,-1,162:10,349:12,162:2,-1,162,-1:20,224,350:4,293,350:3,224,350," +
"224,-1:4,293,224:3,-1,350:10,224:12,350:2,-1,350,-1:20,349,296:4,294,296:3," +
"349,296,349,-1:4,292,349:3,-1,296:7,162,296:2,349:12,296,162,-1,296,-1:20,3" +
"06,350:4,293,350:3,306,350,306,-1:4,295,306:3,-1,350:10,306:12,350:2,-1,350" +
",-1:20,349,162:5,104,162:2,349,162,349,-1:4,349:4,-1,162:10,349:8,104,349:3" +
",162:2,-1,162,-1:20,224,350:5,50,350:2,224,350,224,-1:4,224:4,-1,350:10,224" +
":8,50,224:3,350:2,-1,350,-1:20,349,296:5,132,296:2,349,296,349,-1:4,349:4,-" +
"1,296:7,162,296:2,349:8,104,349:3,296,162,-1,296,-1:20,306,350:5,50,350:2,3" +
"06,350,306,-1:4,306:4,-1,350:10,306:8,304,306:3,350:2,-1,350,-1:20,306,350," +
"310,350:6,306,350,306,-1:4,306:4,-1,350:10,306:4,313,306:7,350:2,-1,350,-1:" +
"3,60,107,60:27,-1:3,60:5,-1,60:28,-1,108,134,108:29,-1:2,108:33,-1:18,224,3" +
"50:7,259,224,350,224,-1:4,224:4,-1,350:10,224:5,259,224:6,350:2,-1,350,-1:2" +
"0,306,350:7,259,306,350,306,-1:4,306:4,-1,350:10,306:5,261,306:6,350:2,-1,3" +
"50,-1:20,224,350:2,267,350:5,224,350,224,-1:4,224:4,-1,350:10,224:2,267,224" +
":9,350:2,-1,350,-1:42,175,-1:44,349,296:8,349,296,243,-1:4,349:4,-1,296:2,2" +
"50,296:4,162,296:2,349:12,296,162,-1,296,-1:20,306,350:2,267,350:5,306,350," +
"306,-1:4,306:4,-1,350:10,306:2,271,306:9,350:2,-1,350,-1:20,349,162:5,246,1" +
"62:2,349,162,349,-1:4,349:4,-1,162:10,349:8,246,349:3,162:2,-1,162,-1:20,34" +
"9,296:5,248,296:2,349,296,349,-1:4,349:4,-1,296:7,162,296:2,349:8,246,349:3" +
",296,162,-1,296,-1:42,184,-1:44,349,162:8,349,162,243,-1:4,349:4,-1,162:2,2" +
"43,162:7,349:12,162:2,-1,162,-1:20,349,296:7,260,349,296,349,-1:4,349:4,-1," +
"296:7,162,296:2,349:5,262,349:6,296,162,-1,296,-1:20,349,162:7,262,349,162," +
"349,-1:4,349:4,-1,162:10,349:5,262,349:6,162:2,-1,162,-1:20,306,350:8,306,3" +
"50,257,-1:4,306:4,-1,350:2,251,350:7,306:12,350:2,-1,350,-1:20,306,350:5,25" +
"3,350:2,306,350,306,-1:4,306:4,-1,350:10,306:8,255,306:3,350:2,-1,350,-1:20" +
",224,350:5,253,350:2,224,350,224,-1:4,224:4,-1,350:10,224:8,253,224:3,350:2" +
",-1,350,-1:66,214,-1:20,289,350:8,224,350,224,-1:4,224:4,-1,350,289,350:8,2" +
"24:12,350:2,-1,350,-1:20,288,296:8,349,296,349,-1:4,349:4,-1,296,290,296:5," +
"162,296:2,349:12,296,162,-1,296,-1:20,288,162:8,349,162,349,-1:4,349:4,-1,1" +
"62,288,162:8,349:12,162:2,-1,162,-1:20,349,296:5,171,296:2,174,296,349,-1:4" +
",349:4,-1,296:3,177,296:3,162,296:2,349:8,180,349:3,296,162,-1,296,-1:3,60," +
"133,60:27,-1:3,60:5,-1,60:28,-1:18,306,350,167,350,170,350:4,306,350,306,-1" +
":4,306:4,-1,350:10,306:4,173,306:2,176,306:4,350:2,-1,350,-1:3,108,150,108:" +
"29,-1:2,108:33,-1:18,224,350:7,269,224,350,224,-1:4,224:4,-1,350:10,224:5,2" +
"69,224:6,350:2,-1,350,-1:20,306,350:7,269,306,350,306,-1:4,306:4,-1,350:10," +
"306:5,273,306:6,350:2,-1,350,-1:20,306,350:5,236,350:2,306,350,306,-1:4,306" +
":4,-1,350:10,306:8,242,306:3,350:2,-1,350,-1:20,224,350:5,236,350:2,224,350" +
",224,-1:4,224:4,-1,350:10,224:8,236,224:3,350:2,-1,350,-1:20,349,296,183,29" +
"6:6,349,296,349,-1:4,349:4,-1,296:7,162,296:2,349:4,186,349:7,296,162,-1,29" +
"6,-1:20,306,350:2,179,350:4,182,306,350,306,-1:4,306:4,-1,350:10,306:2,185," +
"306:2,188,306:6,350:2,-1,350,-1:20,306,350:5,275,350:2,306,350,306,-1:4,306" +
":4,-1,350:10,306:8,277,306:3,350:2,-1,350,-1:20,349,296:7,189,349,296,349,-" +
"1:4,349:4,-1,296:7,162,296:2,349:5,192,349:6,296,162,-1,296,-1:20,306,350:8" +
",197,350,200,-1:4,306:4,-1,350:2,203,206,350:6,306:12,350:2,-1,350,-1:20,34" +
"9,296:8,317,296,314,-1:4,349:4,-1,296:2,315,312,296:3,162,296:2,349:12,296," +
"162,-1,296,-1:20,209,350:8,306,350,306,-1:4,306:4,-1,350,212,350:8,306:12,3" +
"50:2,-1,350,-1:20,349,296:2,201,296:4,318,349,296,349,-1:4,349:4,-1,296:7,1" +
"62,296:2,349:2,204,349:2,319,349:6,296,162,-1,296,-1:20,306,350:5,215,350:2" +
",321,350,306,-1:4,306:4,-1,350:3,322,350:6,306:8,320,306:3,350:2,-1,350,-1:" +
"20,207,296:8,349,296,349,-1:4,349:4,-1,296,210,296:5,162,296:2,349:12,296,1" +
"62,-1,296,-1:20,306,350:7,308,306,350,306,-1:4,306:4,-1,350:10,306:5,309,30" +
"6:6,350:2,-1,350,-1:20,349,296,213,296:6,349,296,349,-1:4,349:4,-1,296:7,16" +
"2,296:2,349:4,216,349:7,296,162,-1,296,-1:20,306,350,218,350:6,306,350,306," +
"-1:4,306:4,-1,350:10,306:4,221,306:7,350:2,-1,350,-1:20,224,350:8,224,350,2" +
"24,-1:4,224:4,-1,350:6,331,350:3,224:10,331,224,350:2,-1,350,-1:20,306,350:" +
"8,306,350,306,-1:4,306:4,-1,350:6,331,350:3,306:10,332,306,350:2,-1,350,-1:" +
"3,60:29,-1:3,60:5,-1,60:3,305,60:24,-1,108:31,-1:2,108:8,307,108:24,-1,60:2" +
"2,328,60:6,-1:3,60:5,-1,60:28,-1,108:22,330,108:8,-1:2,108:33,-1,60:29,-1:3" +
",60:5,-1,60:2,353,60:25,-1,108:31,-1:2,108:7,354,108:25,-1,60:18,355,60:10," +
"-1:3,60:5,-1,60:28,-1,108:18,356,108:12,-1:2,108:33,-1,60:29,-1:3,60:5,-1,6" +
"0,357,60:26,-1,108:31,-1:2,108:6,358,108:26,-1,60:20,359,60:8,-1:3,60:5,-1," +
"60:28,-1,108:20,360,108:10,-1:2,108:33,-1,60:22,361,60:6,-1:3,60:5,-1,60:28" +
",-1,108:22,362,108:8,-1:2,108:33,-1,60:29,-1:3,60:5,-1,60:25,363,60:2,-1,10" +
"8:31,-1:2,108:30,364,108:2,-1,60:29,-1:3,60:5,-1,60,365,60:26,-1,108:31,-1:" +
"2,108:6,366,108:26,-1,60:29,-1:3,60:5,-1,60:25,367,60:2,-1,108:31,-1:2,108:" +
"30,368,108:2,-1,60:18,369,60:10,-1:3,60:5,-1,60:28,-1,108:18,370,108:12,-1:" +
"2,108:33,-1,60:25,371,60:3,-1:3,60:5,-1,60:28,-1,108:25,372,108:5,-1:2,108:" +
"33,-1,60:29,-1:3,60:5,-1,60,373,60:26,-1,108:31,-1:2,108:6,374,108:26,-1,60" +
":27,375,60,-1:3,60:5,-1,60:28,-1,108:27,376,108:3,-1:2,108:33,-1,60:29,-1:3" +
",60:5,-1,377,60:27,-1,108:31,-1:2,108:5,378,108:27,-1,60:29,-1:3,60:5,-1,60" +
":23,379,60:4,-1,108:31,-1:2,108:28,380,108:4,-1,60:29,-1:3,60:5,-1,381,60:2" +
"4,405,60:2,-1,108:31,-1:2,108:5,382,108:24,406,108:2,-1,60:20,383,60:8,-1:3" +
",60:5,-1,60:28,-1,108:20,384,108:10,-1:2,108:33,-1,60:10,385,60:18,-1:3,60:" +
"5,-1,60:28,-1,108:10,386,108:20,-1:2,108:33,-1,60:18,387,60:10,-1:3,60:5,-1" +
",60:28,-1,108:18,388,108:12,-1:2,108:33,-1,60:9,389,60:19,-1:3,60:5,-1,60:2" +
"8,-1,108:9,390,108:21,-1:2,108:33,-1,60:29,-1:3,60:5,-1,60,391,60:26,-1,108" +
":31,-1:2,108:6,392,108:26,-1,60:29,-1:3,60:5,-1,60:3,395,60:24,-1,108:31,-1" +
":2,108:8,396,108:24,-1,60:29,-1:3,60:5,-1,60,397,60:26,-1,108:31,-1:2,108:6" +
",398,108:26,-1,60:22,399,60:6,-1:3,60:5,-1,60:28,-1,108:22,400,108:8,-1:2,1" +
"08:33,-1,60:29,-1:3,60:5,-1,60:3,401,60:24,-1,108:31,-1:2,108:8,402,108:24," +
"-1,60:29,-1:3,60:5,-1,60:9,403,60:18,-1,108:31,-1:2,108:14,404,108:18");

	public java_cup.runtime.Symbol next_token ()
		throws java.io.IOException {
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {

/*  Stuff enclosed in %eofval{ %eofval} specifies java code that is
 *  executed when end-of-file is reached.  If you use multiple lexical
 *  states and want to do something special if an EOF is encountered in
 *  one of those states, place your code in the switch statement.
 *  Ultimately, you should return the EOF symbol, or your lexer won't
 *  work.  */
    Symbol s = null;
    switch(yy_lexical_state) {
    case YYINITIAL:
      /* nothing special to do in the initial state */
      return new Symbol(TokenConstants.EOF);
      //break;
      /* If necessary, add code for other states here, e.g:*/
    case MULTILINE_COMMENT:
      error_msg = "EOF in comment"; 
      yybegin(YYINITIAL);
      s =  new Symbol(TokenConstants.ERROR); s.value = error_msg; return s;
      //break;
    case LINE_COMMENT:
      /* end line comment */
      break;
    case STRING:
      error_msg = "EOF in string constant"; 
      yybegin(YYINITIAL);
      s =  new Symbol(TokenConstants.ERROR); s.value = error_msg; return s;
      //break;
    }
    return new Symbol(TokenConstants.EOF);
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						
					case -2:
						break;
					case 2:
						{ return new Symbol(TokenConstants.EQ); }
					case -3:
						break;
					case 3:
						{ /* This rule should be the very last
					       in your lexical specification and
                                               will match match everything not
                                               matched by other lexical rules. */
                                               // System.err.println("line: "+get_curr_lineno() + " " + "LEXER BUG - UNMATCHED: " + yytext());
                                            error_msg = yytext(); Symbol s = new Symbol(TokenConstants.ERROR); s.value = error_msg; return s; }
					case -4:
						break;
					case 4:
						{ return new Symbol(TokenConstants.LPAREN);  }
					case -5:
						break;
					case 5:
						{ return new Symbol(TokenConstants.RPAREN);  }
					case -6:
						break;
					case 6:
						{ return new Symbol(TokenConstants.LBRACE);  }
					case -7:
						break;
					case 7:
						{ return new Symbol(TokenConstants.RBRACE);  }
					case -8:
						break;
					case 8:
						{ return new Symbol(TokenConstants.MULT); }
					case -9:
						break;
					case 9:
						{ return new Symbol(TokenConstants.PLUS); }
					case -10:
						break;
					case 10:
						{ return new Symbol(TokenConstants.MINUS); }
					case -11:
						break;
					case 11:
						{ return new Symbol(TokenConstants.DIV); }
					case -12:
						break;
					case 12:
						{ return new Symbol(TokenConstants.LT); }
					case -13:
						break;
					case 13:
						{ return new Symbol(TokenConstants.DOT); }
					case -14:
						break;
					case 14:
						{ return new Symbol(TokenConstants.SEMI); }
					case -15:
						break;
					case 15:
						{ return new Symbol(TokenConstants.COLON); }
					case -16:
						break;
					case 16:
						{ return new Symbol(TokenConstants.AT); }
					case -17:
						break;
					case 17:
						{ return new Symbol(TokenConstants.COMMA); }
					case -18:
						break;
					case 18:
						{ return new Symbol(TokenConstants.NEG); }
					case -19:
						break;
					case 19:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -20:
						break;
					case 20:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -21:
						break;
					case 21:
						{ string.setLength(0); yybegin(STRING); }
					case -22:
						break;
					case 22:
						{ curr_lineno++; }
					case -23:
						break;
					case 23:
						{ /* skip */ }
					case -24:
						break;
					case 24:
						{ Symbol s = new Symbol(TokenConstants.INT_CONST); s.value = AbstractTable.inttable.addString(yytext()); return s; }
					case -25:
						break;
					case 25:
						{ /* skip */ }
					case -26:
						break;
					case 26:
						{ /* Sample lexical rule for "=>" arrow.
                                                Further lexical rules should be defined
                                                 here, after the last %% separator */
                                             return new Symbol(TokenConstants.DARROW); }
					case -27:
						break;
					case 27:
						{ yybegin(MULTILINE_COMMENT); nested = 0; }
					case -28:
						break;
					case 28:
						{ error_msg = "Unmatched *)"; Symbol s = new Symbol(TokenConstants.ERROR); s.value = error_msg; return s; }
					case -29:
						break;
					case 29:
						{ yybegin(LINE_COMMENT); }
					case -30:
						break;
					case 30:
						{ return new Symbol(TokenConstants.LE); }
					case -31:
						break;
					case 31:
						{ return new Symbol(TokenConstants.ASSIGN); }
					case -32:
						break;
					case 32:
						{ return new Symbol(TokenConstants.IN); }
					case -33:
						break;
					case 33:
						{ return new Symbol(TokenConstants.IF); }
					case -34:
						break;
					case 34:
						{ return new Symbol(TokenConstants.OF); }
					case -35:
						break;
					case 35:
						{ return new Symbol(TokenConstants.FI); }
					case -36:
						break;
					case 36:
						{ return new Symbol(TokenConstants.NEW); }
					case -37:
						break;
					case 37:
						{ return new Symbol(TokenConstants.NOT); }
					case -38:
						break;
					case 38:
						{ return new Symbol(TokenConstants.LET); }
					case -39:
						break;
					case 39:
						{ return new Symbol(TokenConstants.DIV); }
					case -40:
						break;
					case 40:
						{ return new Symbol(TokenConstants.ESAC); }
					case -41:
						break;
					case 41:
						{ return new Symbol(TokenConstants.ELSE); }
					case -42:
						break;
					case 42:
						{ return new Symbol(TokenConstants.THEN); }
					case -43:
						break;
					case 43:
						{ return new Symbol(TokenConstants.POOL); }
					case -44:
						break;
					case 44:
						{ return new Symbol(TokenConstants.LOOP); }
					case -45:
						break;
					case 45:
						{ return new Symbol(TokenConstants.CASE); }
					case -46:
						break;
					case 46:
						{ BoolConst bool = null;
                                            if (yytext().equals("true")) bool = BoolConst.truebool;
                                            else if (yytext().equals("false")) bool = BoolConst.falsebool;
					    Symbol s = new Symbol(TokenConstants.BOOL_CONST, bool); s.value = Boolean.valueOf(yytext()); return s; }
					case -47:
						break;
					case 47:
						{ return new Symbol(TokenConstants.CLASS); }
					case -48:
						break;
					case 48:
						{ return new Symbol(TokenConstants.WHILE); }
					case -49:
						break;
					case 49:
						{ return new Symbol(TokenConstants.ISVOID); }
					case -50:
						break;
					case 50:
						{ return new Symbol(TokenConstants.INHERITS); }
					case -51:
						break;
					case 51:
						{ error_msg = "This contains an escaped null character"; Symbol s = new Symbol(TokenConstants.ERROR);  s.value = error_msg; return s; }
					case -52:
						break;
					case 52:
						{ yybegin(MULTILINE_COMMENT); string.append(yytext()); nested = 0; }
					case -53:
						break;
					case 53:
						{ string.append(yytext()); }
					case -54:
						break;
					case 54:
						{ /* ignore */  string.append(yytext());}
					case -55:
						break;
					case 55:
						{ curr_lineno++; string.append("\n");}
					case -56:
						break;
					case 56:
						{ /* ignore */  string.append(yytext());}
					case -57:
						break;
					case 57:
						{ nested++; string.append(yytext());  }
					case -58:
						break;
					case 58:
						{ string.append(yytext()); if (nested-- == 0) {yybegin(YYINITIAL); System.out.println("nested: "+nested+" comment: \n"+string); string.delete(0, string.length()-1); }}
					case -59:
						break;
					case 59:
						{ /* ignore */ }
					case -60:
						break;
					case 60:
						{ string.append( yytext()); }
					case -61:
						break;
					case 61:
						{ yybegin(YYINITIAL); 
                                             if (string.length() > MAX_LEN_STRING) {
					       error_msg = "String constant too long";
                                               Symbol s =  new Symbol(TokenConstants.ERROR); s.value = error_msg; return s;
                                              }  
					     else { Symbol s = new Symbol(TokenConstants.STR_CONST); 
					       s.value = AbstractTable.stringtable.addString(string.toString());
					       return s; } }
					case -62:
						break;
					case 62:
						{ yybegin(YYINITIAL); curr_lineno++;  
                                            error_msg = "Unterminated string constant";
                                            //AbstractTable.stringtable.addString(string.deleteCharAt(string.length()-1).toString()); 
                                            Symbol s = new Symbol(TokenConstants.ERROR); s.value = error_msg; return s; }
					case -63:
						break;
					case 63:
						{ yybegin(NULLCHAR); error_msg = "String contains null character."; Symbol s = new Symbol(TokenConstants.ERROR);  s.value = error_msg; return s; }
					case -64:
						break;
					case 64:
						{ string.append( yytext().charAt(1) ); }
					case -65:
						break;
					case 65:
						{ string.append('\"'); }
					case -66:
						break;
					case 66:
						{ string.append('\\'); }
					case -67:
						break;
					case 67:
						{ string.append('\n'); curr_lineno++; }
					case -68:
						break;
					case 68:
						{ string.append('\t'); }
					case -69:
						break;
					case 69:
						{ string.append('\n'); }
					case -70:
						break;
					case 70:
						{ string.append('\b'); }
					case -71:
						break;
					case 71:
						{ string.append('\f'); }
					case -72:
						break;
					case 72:
						{ yybegin(NULLCHAR); error_msg = "String contains escaped null character."; Symbol s = new Symbol(TokenConstants.ERROR);  s.value = error_msg; return s; }
					case -73:
						break;
					case 73:
						{ /* ignore */ }
					case -74:
						break;
					case 74:
						{ yybegin(YYINITIAL); curr_lineno++; }
					case -75:
						break;
					case 75:
						{ /* ignore */ }
					case -76:
						break;
					case 76:
						{ /* ignore */ }
					case -77:
						break;
					case 77:
						{ /* ignore */ }
					case -78:
						break;
					case 78:
						{ curr_lineno++; }
					case -79:
						break;
					case 79:
						{ nested++;  }
					case -80:
						break;
					case 80:
						{  if (nested-- == 0) yybegin(YYINITIAL); }
					case -81:
						break;
					case 81:
						{ /* skip */ }
					case -82:
						break;
					case 82:
						{ yybegin(YYINITIAL); }
					case -83:
						break;
					case 84:
						{ /* This rule should be the very last
					       in your lexical specification and
                                               will match match everything not
                                               matched by other lexical rules. */
                                               // System.err.println("line: "+get_curr_lineno() + " " + "LEXER BUG - UNMATCHED: " + yytext());
                                            error_msg = yytext(); Symbol s = new Symbol(TokenConstants.ERROR); s.value = error_msg; return s; }
					case -84:
						break;
					case 85:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -85:
						break;
					case 86:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -86:
						break;
					case 87:
						{ return new Symbol(TokenConstants.IN); }
					case -87:
						break;
					case 88:
						{ return new Symbol(TokenConstants.IF); }
					case -88:
						break;
					case 89:
						{ return new Symbol(TokenConstants.OF); }
					case -89:
						break;
					case 90:
						{ return new Symbol(TokenConstants.FI); }
					case -90:
						break;
					case 91:
						{ return new Symbol(TokenConstants.NEW); }
					case -91:
						break;
					case 92:
						{ return new Symbol(TokenConstants.NOT); }
					case -92:
						break;
					case 93:
						{ return new Symbol(TokenConstants.LET); }
					case -93:
						break;
					case 94:
						{ return new Symbol(TokenConstants.DIV); }
					case -94:
						break;
					case 95:
						{ return new Symbol(TokenConstants.ESAC); }
					case -95:
						break;
					case 96:
						{ return new Symbol(TokenConstants.ELSE); }
					case -96:
						break;
					case 97:
						{ return new Symbol(TokenConstants.THEN); }
					case -97:
						break;
					case 98:
						{ return new Symbol(TokenConstants.POOL); }
					case -98:
						break;
					case 99:
						{ return new Symbol(TokenConstants.LOOP); }
					case -99:
						break;
					case 100:
						{ return new Symbol(TokenConstants.CASE); }
					case -100:
						break;
					case 101:
						{ return new Symbol(TokenConstants.CLASS); }
					case -101:
						break;
					case 102:
						{ return new Symbol(TokenConstants.WHILE); }
					case -102:
						break;
					case 103:
						{ return new Symbol(TokenConstants.ISVOID); }
					case -103:
						break;
					case 104:
						{ return new Symbol(TokenConstants.INHERITS); }
					case -104:
						break;
					case 105:
						{ error_msg = "This contains an escaped null character"; Symbol s = new Symbol(TokenConstants.ERROR);  s.value = error_msg; return s; }
					case -105:
						break;
					case 106:
						{ /* ignore */  string.append(yytext());}
					case -106:
						break;
					case 107:
						{ string.append( yytext()); }
					case -107:
						break;
					case 108:
						{ /* ignore */ }
					case -108:
						break;
					case 109:
						{ /* ignore */ }
					case -109:
						break;
					case 110:
						{ /* ignore */ }
					case -110:
						break;
					case 111:
						{ /* skip */ }
					case -111:
						break;
					case 113:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -112:
						break;
					case 114:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -113:
						break;
					case 115:
						{ return new Symbol(TokenConstants.IN); }
					case -114:
						break;
					case 116:
						{ return new Symbol(TokenConstants.IF); }
					case -115:
						break;
					case 117:
						{ return new Symbol(TokenConstants.OF); }
					case -116:
						break;
					case 118:
						{ return new Symbol(TokenConstants.FI); }
					case -117:
						break;
					case 119:
						{ return new Symbol(TokenConstants.NEW); }
					case -118:
						break;
					case 120:
						{ return new Symbol(TokenConstants.NOT); }
					case -119:
						break;
					case 121:
						{ return new Symbol(TokenConstants.LET); }
					case -120:
						break;
					case 122:
						{ return new Symbol(TokenConstants.DIV); }
					case -121:
						break;
					case 123:
						{ return new Symbol(TokenConstants.ESAC); }
					case -122:
						break;
					case 124:
						{ return new Symbol(TokenConstants.ELSE); }
					case -123:
						break;
					case 125:
						{ return new Symbol(TokenConstants.THEN); }
					case -124:
						break;
					case 126:
						{ return new Symbol(TokenConstants.POOL); }
					case -125:
						break;
					case 127:
						{ return new Symbol(TokenConstants.LOOP); }
					case -126:
						break;
					case 128:
						{ return new Symbol(TokenConstants.CASE); }
					case -127:
						break;
					case 129:
						{ return new Symbol(TokenConstants.CLASS); }
					case -128:
						break;
					case 130:
						{ return new Symbol(TokenConstants.WHILE); }
					case -129:
						break;
					case 131:
						{ return new Symbol(TokenConstants.ISVOID); }
					case -130:
						break;
					case 132:
						{ return new Symbol(TokenConstants.INHERITS); }
					case -131:
						break;
					case 133:
						{ string.append( yytext()); }
					case -132:
						break;
					case 134:
						{ /* ignore */ }
					case -133:
						break;
					case 136:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -134:
						break;
					case 137:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -135:
						break;
					case 138:
						{ return new Symbol(TokenConstants.OF); }
					case -136:
						break;
					case 139:
						{ return new Symbol(TokenConstants.NEW); }
					case -137:
						break;
					case 140:
						{ return new Symbol(TokenConstants.NOT); }
					case -138:
						break;
					case 141:
						{ return new Symbol(TokenConstants.DIV); }
					case -139:
						break;
					case 142:
						{ return new Symbol(TokenConstants.ESAC); }
					case -140:
						break;
					case 143:
						{ return new Symbol(TokenConstants.ELSE); }
					case -141:
						break;
					case 144:
						{ return new Symbol(TokenConstants.THEN); }
					case -142:
						break;
					case 145:
						{ return new Symbol(TokenConstants.POOL); }
					case -143:
						break;
					case 146:
						{ return new Symbol(TokenConstants.CASE); }
					case -144:
						break;
					case 147:
						{ return new Symbol(TokenConstants.CLASS); }
					case -145:
						break;
					case 148:
						{ return new Symbol(TokenConstants.WHILE); }
					case -146:
						break;
					case 149:
						{ string.append( yytext()); }
					case -147:
						break;
					case 150:
						{ /* ignore */ }
					case -148:
						break;
					case 152:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -149:
						break;
					case 153:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -150:
						break;
					case 154:
						{ string.append( yytext()); }
					case -151:
						break;
					case 155:
						{ /* ignore */ }
					case -152:
						break;
					case 157:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -153:
						break;
					case 158:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -154:
						break;
					case 159:
						{ /* ignore */ }
					case -155:
						break;
					case 161:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -156:
						break;
					case 162:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -157:
						break;
					case 164:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -158:
						break;
					case 165:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -159:
						break;
					case 167:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -160:
						break;
					case 168:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -161:
						break;
					case 170:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -162:
						break;
					case 171:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -163:
						break;
					case 173:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -164:
						break;
					case 174:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -165:
						break;
					case 176:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -166:
						break;
					case 177:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -167:
						break;
					case 179:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -168:
						break;
					case 180:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -169:
						break;
					case 182:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -170:
						break;
					case 183:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -171:
						break;
					case 185:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -172:
						break;
					case 186:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -173:
						break;
					case 188:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -174:
						break;
					case 189:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -175:
						break;
					case 191:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -176:
						break;
					case 192:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -177:
						break;
					case 194:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -178:
						break;
					case 195:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -179:
						break;
					case 197:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -180:
						break;
					case 198:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -181:
						break;
					case 200:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -182:
						break;
					case 201:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -183:
						break;
					case 203:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -184:
						break;
					case 204:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -185:
						break;
					case 206:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -186:
						break;
					case 207:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -187:
						break;
					case 209:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -188:
						break;
					case 210:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -189:
						break;
					case 212:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -190:
						break;
					case 213:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -191:
						break;
					case 215:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -192:
						break;
					case 216:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -193:
						break;
					case 218:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -194:
						break;
					case 219:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -195:
						break;
					case 221:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -196:
						break;
					case 222:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -197:
						break;
					case 224:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -198:
						break;
					case 225:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -199:
						break;
					case 227:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -200:
						break;
					case 228:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -201:
						break;
					case 230:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -202:
						break;
					case 231:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -203:
						break;
					case 233:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -204:
						break;
					case 234:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -205:
						break;
					case 236:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -206:
						break;
					case 237:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -207:
						break;
					case 239:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -208:
						break;
					case 240:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -209:
						break;
					case 242:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -210:
						break;
					case 243:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -211:
						break;
					case 245:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -212:
						break;
					case 246:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -213:
						break;
					case 247:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -214:
						break;
					case 248:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -215:
						break;
					case 249:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -216:
						break;
					case 250:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -217:
						break;
					case 251:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -218:
						break;
					case 252:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -219:
						break;
					case 253:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -220:
						break;
					case 254:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -221:
						break;
					case 255:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -222:
						break;
					case 256:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -223:
						break;
					case 257:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -224:
						break;
					case 258:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -225:
						break;
					case 259:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -226:
						break;
					case 260:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -227:
						break;
					case 261:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -228:
						break;
					case 262:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -229:
						break;
					case 263:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -230:
						break;
					case 264:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -231:
						break;
					case 265:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -232:
						break;
					case 266:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -233:
						break;
					case 267:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -234:
						break;
					case 268:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -235:
						break;
					case 269:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -236:
						break;
					case 270:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -237:
						break;
					case 271:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -238:
						break;
					case 272:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -239:
						break;
					case 273:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -240:
						break;
					case 274:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -241:
						break;
					case 275:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -242:
						break;
					case 276:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -243:
						break;
					case 277:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -244:
						break;
					case 278:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -245:
						break;
					case 279:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -246:
						break;
					case 280:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -247:
						break;
					case 281:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -248:
						break;
					case 282:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -249:
						break;
					case 283:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -250:
						break;
					case 284:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -251:
						break;
					case 285:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -252:
						break;
					case 286:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -253:
						break;
					case 287:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -254:
						break;
					case 288:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -255:
						break;
					case 289:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -256:
						break;
					case 290:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -257:
						break;
					case 291:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -258:
						break;
					case 292:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -259:
						break;
					case 293:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -260:
						break;
					case 294:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -261:
						break;
					case 295:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -262:
						break;
					case 296:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -263:
						break;
					case 297:
						{ return new Symbol(TokenConstants.IN); }
					case -264:
						break;
					case 298:
						{ return new Symbol(TokenConstants.IF); }
					case -265:
						break;
					case 299:
						{ return new Symbol(TokenConstants.FI); }
					case -266:
						break;
					case 300:
						{ return new Symbol(TokenConstants.LET); }
					case -267:
						break;
					case 301:
						{ return new Symbol(TokenConstants.LOOP); }
					case -268:
						break;
					case 302:
						{ BoolConst bool = null;
                                            if (yytext().equals("true")) bool = BoolConst.truebool;
                                            else if (yytext().equals("false")) bool = BoolConst.falsebool;
					    Symbol s = new Symbol(TokenConstants.BOOL_CONST, bool); s.value = Boolean.valueOf(yytext()); return s; }
					case -269:
						break;
					case 303:
						{ return new Symbol(TokenConstants.ISVOID); }
					case -270:
						break;
					case 304:
						{ return new Symbol(TokenConstants.INHERITS); }
					case -271:
						break;
					case 305:
						{ string.append( yytext()); }
					case -272:
						break;
					case 306:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -273:
						break;
					case 307:
						{ /* ignore */ }
					case -274:
						break;
					case 308:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -275:
						break;
					case 309:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -276:
						break;
					case 310:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -277:
						break;
					case 312:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -278:
						break;
					case 313:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -279:
						break;
					case 314:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -280:
						break;
					case 315:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -281:
						break;
					case 317:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -282:
						break;
					case 318:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -283:
						break;
					case 319:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -284:
						break;
					case 320:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -285:
						break;
					case 321:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -286:
						break;
					case 322:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -287:
						break;
					case 324:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -288:
						break;
					case 325:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -289:
						break;
					case 326:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -290:
						break;
					case 327:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -291:
						break;
					case 328:
						{ string.append( yytext()); }
					case -292:
						break;
					case 329:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -293:
						break;
					case 330:
						{ /* ignore */ }
					case -294:
						break;
					case 331:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -295:
						break;
					case 332:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -296:
						break;
					case 333:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -297:
						break;
					case 334:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -298:
						break;
					case 335:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -299:
						break;
					case 336:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -300:
						break;
					case 337:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -301:
						break;
					case 338:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -302:
						break;
					case 339:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -303:
						break;
					case 340:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -304:
						break;
					case 341:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -305:
						break;
					case 342:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -306:
						break;
					case 343:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -307:
						break;
					case 344:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -308:
						break;
					case 345:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -309:
						break;
					case 346:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -310:
						break;
					case 347:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -311:
						break;
					case 348:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -312:
						break;
					case 349:
						{ Symbol s = new Symbol(TokenConstants.TYPEID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -313:
						break;
					case 350:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -314:
						break;
					case 351:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -315:
						break;
					case 352:
						{ Symbol s = new Symbol(TokenConstants.OBJECTID); s.value = AbstractTable.idtable.addString(yytext()); return s; }
					case -316:
						break;
					case 353:
						{ string.append( yytext()); }
					case -317:
						break;
					case 354:
						{ /* ignore */ }
					case -318:
						break;
					case 355:
						{ string.append( yytext()); }
					case -319:
						break;
					case 356:
						{ /* ignore */ }
					case -320:
						break;
					case 357:
						{ string.append( yytext()); }
					case -321:
						break;
					case 358:
						{ /* ignore */ }
					case -322:
						break;
					case 359:
						{ string.append( yytext()); }
					case -323:
						break;
					case 360:
						{ /* ignore */ }
					case -324:
						break;
					case 361:
						{ string.append( yytext()); }
					case -325:
						break;
					case 362:
						{ /* ignore */ }
					case -326:
						break;
					case 363:
						{ string.append( yytext()); }
					case -327:
						break;
					case 364:
						{ /* ignore */ }
					case -328:
						break;
					case 365:
						{ string.append( yytext()); }
					case -329:
						break;
					case 366:
						{ /* ignore */ }
					case -330:
						break;
					case 367:
						{ string.append( yytext()); }
					case -331:
						break;
					case 368:
						{ /* ignore */ }
					case -332:
						break;
					case 369:
						{ string.append( yytext()); }
					case -333:
						break;
					case 370:
						{ /* ignore */ }
					case -334:
						break;
					case 371:
						{ string.append( yytext()); }
					case -335:
						break;
					case 372:
						{ /* ignore */ }
					case -336:
						break;
					case 373:
						{ string.append( yytext()); }
					case -337:
						break;
					case 374:
						{ /* ignore */ }
					case -338:
						break;
					case 375:
						{ string.append( yytext()); }
					case -339:
						break;
					case 376:
						{ /* ignore */ }
					case -340:
						break;
					case 377:
						{ string.append( yytext()); }
					case -341:
						break;
					case 378:
						{ /* ignore */ }
					case -342:
						break;
					case 379:
						{ string.append( yytext()); }
					case -343:
						break;
					case 380:
						{ /* ignore */ }
					case -344:
						break;
					case 381:
						{ string.append( yytext()); }
					case -345:
						break;
					case 382:
						{ /* ignore */ }
					case -346:
						break;
					case 383:
						{ string.append( yytext()); }
					case -347:
						break;
					case 384:
						{ /* ignore */ }
					case -348:
						break;
					case 385:
						{ string.append( yytext()); }
					case -349:
						break;
					case 386:
						{ /* ignore */ }
					case -350:
						break;
					case 387:
						{ string.append( yytext()); }
					case -351:
						break;
					case 388:
						{ /* ignore */ }
					case -352:
						break;
					case 389:
						{ string.append( yytext()); }
					case -353:
						break;
					case 390:
						{ /* ignore */ }
					case -354:
						break;
					case 391:
						{ string.append( yytext()); }
					case -355:
						break;
					case 392:
						{ /* ignore */ }
					case -356:
						break;
					case 393:
						{ string.append( yytext()); }
					case -357:
						break;
					case 394:
						{ /* ignore */ }
					case -358:
						break;
					case 395:
						{ string.append( yytext()); }
					case -359:
						break;
					case 396:
						{ /* ignore */ }
					case -360:
						break;
					case 397:
						{ string.append( yytext()); }
					case -361:
						break;
					case 398:
						{ /* ignore */ }
					case -362:
						break;
					case 399:
						{ string.append( yytext()); }
					case -363:
						break;
					case 400:
						{ /* ignore */ }
					case -364:
						break;
					case 401:
						{ string.append( yytext()); }
					case -365:
						break;
					case 402:
						{ /* ignore */ }
					case -366:
						break;
					case 403:
						{ string.append( yytext()); }
					case -367:
						break;
					case 404:
						{ /* ignore */ }
					case -368:
						break;
					case 405:
						{ string.append( yytext()); }
					case -369:
						break;
					case 406:
						{ /* ignore */ }
					case -370:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
